HashMap Solved Problems

Q.Intersection of two arrays LC-349

https://leetcode.com/problems/intersection-of-two-arrays/

#Pop is used to avoid repitiion of elements.Once one element is appended to res, then it is popped from dict
class Solution:
    #TC-O(m+n)
    #SC-O(m)
    def intersection(self, nums1: List[int], nums2: List[int]) -> List[int]:
        d = {}
        for idx in (nums1):
            d[idx] = True
        res = []
        for i in nums2:
            if i in d:
                res.append(i)
                d.pop(i)
        return res

Q. Intersection of Two Arrays II LC-350

https://leetcode.com/problems/intersection-of-two-arrays-ii/

#the problem is same as above but here we are returning the elements as many time it appears.
class Solution:
    def intersect(self, nums1: List[int], nums2: List[int]) -> List[int]:
        #TC-O(m+n)
        #SC-O(m)
        d = {}
        for idx in (nums1):
            if idx in d:
                d[idx] += 1
            else:
                d[idx] = 1
        res = []
        for i in nums2:
            if i in d and d[i]>0:
                res.append(i)
                d[i] -= 1
        return res

Q. Intersection of three arrays

https://practice.geeksforgeeks.org/problems/common-elements1132/1/

# same as above one, first we find common elements in first and second array, and then the common elements between resultant and third array.

class Solution:
    def commonElements (self,A, B, C, n1, n2, n3):
        # TC-O(A+B+C)
	  # SC-O(A+B)
        d = {}
        for idx in (A):
            #if idx not in d:
                d[idx] = True
        d1 = {}
        for i in B:
            #if i in d:
                d1[i] = True
                d.pop(i)
        res=[]        
        for i in C:
            if i in d1:
                res.append(i)
                d1.pop(i)
        return res

#Total number of subarrays for a given array of size n is n(n+1)/2

#code to generate all subarrrays brute force method

x=[-1,1,0,-1]
res = []
for i in range(len(x)):
    for j in range(i+1,len(x)+1):
        res.append(x[i:j])
print(res)

Note:- for largest zero subarray we deal with indexes, for count of zero subarray we deal with occurcencess in hashmap

Q. Largest subarray with 0 sum

https://practice.geeksforgeeks.org/problems/largest-subarray-with-0-sum/1#

#Here we use set 0 index to -1, because we set prefix sum to 0 initially which is done before to the 0 index.

class Solution:
    #TC&SC - o(n)
    def maxLen(self, n, arr):
        #Code here
        memo={}
        prefixSum = 0
        ans=0
        
        memo[prefixSum] = -1
        
        for i in range(n):
            prefixSum += arr[i]
            
            if prefixSum in memo:
                ans= max(ans,i-memo[prefixSum])
            else:
                memo[prefixSum] = i
                
        return ans

Q: Subarrays With Zero Sum

https://www.codingninjas.com/codestudio/problems/subarrays-with-zero-sum_3161876?leftPanelTab=0

from typing import List

def countSubarrays(n: int, arr: List[int]) -> int:
    #brute force approach 
    #Tc- o(n3)
    #res = []
    #for i in range(len(arr)):
        #for j in range(i+1,len(arr)+1):
            #res.append(arr[i:j])
    #cs=0
    #for i in range(len(res)):
        #sum1 = sum(res[i])
        #if sum1==0:
            #cs += 1
    #return cs
    
    #using hashmap
    #TC - O(n)
    memo = {}
    ans = 0
    preFixSum = 0
    memo[0]=1
    for i in arr:
        preFixSum += i
        if preFixSum in memo:
            ans=ans+memo[preFixSum]
            memo[preFixSum] +=1
        else:
            memo[preFixSum] = 1
    return ans


Q: Union of two arrays

https://practice.geeksforgeeks.org/problems/union-of-two-arrays3538/1

class Solution:    
    def doUnion(self,a,n,b,m):
        #TC-O(n)+O(m)
        #SC-O(d)
        d={}
        
        for i in a:
            d[i] = True
                
        for i in b:
            if i not in d:
                d[i] = True
            
        return len(d)


#Sliding window has two operations 1.acquire 2.release
#Acquire - is used to iterate over elements till the k element size
# release - is used to move to the next element when the acquire reaches k size
Q: Count distinct elements in every window

https://practice.geeksforgeeks.org/problems/count-distinct-elements-in-every-window/1

#Brute Force approach
#TC - O(n*k)
l=[1,2,1,3,4,2,3]
k=4
ans=[]
for i in range(len(l)-k+1): #O(n)
    d = {}
    count = 0
    for j in range(i,i+k):#O(k)
        if l[j] not in d:
            count+=1
            d[l[j]] = 1
    ans.append(count)
print(ans)


# The below four problem are of same type we use the expression method for solving the questions of type of equal 0 and 1 or equal 0 1 and 2
Q: Equal 0, 1 and 2

https://practice.geeksforgeeks.org/problems/equal-0-1-and-23208/1/

#Input: str = “0102010”
#Output: 2
#Explanation: Substring str[2, 4] = “102” and substring str[4, 6] = “201” has equal number of 0, 1 and 2

#HashMap approach

class Solution:
    def getSubstringWithEqual012(self, Str):
        # TC- O(n)
        # SC - O(n)
        z0 = 0
        z1 = 0
        z2 = 0
        d = {}
        
        ans=0
        
        d[str(z1-z0)+"-"+str(z2-z1)] = 1
        
        for i in range(len(Str)):
            
            if Str[i] == '0':
                z0 += 1
            
            elif Str[i] == '1':
                z1 += 1
            
            else:
                z2 += 1
            
            expr = str(z1-z0)+"-"+str(z2-z1)
            
            if expr in d:
                ans += d[expr]
                d[expr] += 1
            else:
                d[expr] = 1
        
        return ans

Q:Subarrays with equal 1s and 0s

https://practice.geeksforgeeks.org/problems/count-subarrays-with-equal-number-of-1s-and-0s-1587115620/1/#

#same as above here it is only 0 and 1, where as above it is 0,1

class Solution:
    
    #Function to count subarrays with 1s and 0s.
    def countSubarrWithEqualZeroAndOne(self,arr, n):
        #Your code here
        z0 = 0
        z1 = 1
        d={}
        
        ans = 0
        d[z1-z0] = 1
        
        for i in arr:
            
            if i == 0:
                z0 += 1
            else:
                z1 += 1
                
            expr = z1-z0
            
            if expr in d:
                ans += d[expr]
                d[expr] += 1
            else:
                d[expr] = 1
                
        return ans

Q: Longest Subarray With Equal Number Of 0s 1s And 2s
https://www.pepcoding.com/resources/data-structures-and-algorithms-in-java-levelup/hashmap-and-heaps/longest-subarray-with-equal-number-of-0s-1s-and-2s-official/ojquestion

#Same as above, here we will consider the indexes instead of count
def largestSubArray(N,nums):
    z0=0
    z1=0
    z2=0
    d={}
    ans = 0
    
    d[str(z1-z0)+"#"+str(z2-z1)] = -1
    
    for i in range(N):
        if nums[i] == 0:
            z0 +=1
        elif nums[i] == 1:
            z1 += 1
        else:
            z2 += 1
        
        expr = str(z1-z0)+"#"+str(z2-z1)
        
        if expr in d:
            ans = max(ans,i-d[expr])
        else:
            d[expr]=i
    
    return ans


Q:Largest subarray of 0's and 1's 

#same as above here it is only 0 and 1, where as above it is 0,1 and 2

https://practice.geeksforgeeks.org/problems/largest-subarray-of-0s-and-1s/1/

class Solution:
    def maxLen(self,arr, N):
        # code here
        
        z0 = 0
        z1 = 1
        d={}
        
        ans = 0
        d[z1-z0] = -1
        
        for i in range(len(arr)):
            
            if arr[i] == 0:
                z0 += 1
            else:
                z1 += 1
                
            expr = z1-z0
            
            if expr in d:
                ans = max(ans,i-d[expr])
            else:
                d[expr] = i
                
        return ans



#These are of type largest and longest subarray with 0 sum
#Here we take ps-k and search in hashmap if we already have them
Q: Subarray Sum Equals K(LC 560)

https://leetcode.com/problems/subarray-sum-equals-k/

class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        #TC - O(n)
        #SC - O(n)
        ans = 0
        ps = 0
        d = {}
        d[0] = 1
        
        for i in nums:
            
            ps += i
            
            if (ps-k) in d:
                ans += d[ps-k]
             
            if ps in d:
                d[ps] += 1
            else:
                d[ps] = 1
        
        return ans




Q:Longest Sub-Array with Sum K

https://practice.geeksforgeeks.org/problems/longest-sub-array-with-sum-k0809/1/


class Solution:
    def lenOfLongSubarr (self, nums, N, k) : 
        #Complete the function
        #TC - O(n)
        #SC - O(n)
        ans = 0
        ps = 0
        d = {}
        
        d[0] = -1
        
        for i in range(N):
            
            ps += nums[i]
            
            if (ps-k) in d:
                ans = max(ans,i-d[ps-k])
             
            if ps not in d:
                d[ps] = i
        
        return ans