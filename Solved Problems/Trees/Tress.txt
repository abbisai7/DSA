https://www.geeksforgeeks.org/binary-tree-set-1-introduction/

Q: 104. Maximum Depth of Binary Tree

https://leetcode.com/problems/maximum-depth-of-binary-tree/

#    node
#    /\
#  1+LC 1+RC

class Solution:
    #TC - O(n)
    #SC - O(1) or O(height of tree)
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        return self.height(root)
    
    def height(self,root):
        
        if root == None:
            return 0
        
        leftAns = 1 + self.height(root.left)
        rightAns = 1 + self.height(root.right)
        
        return max(leftAns,rightAns)


Q: 559. Maximum Depth of N-ary Tree

https://leetcode.com/problems/maximum-depth-of-n-ary-tree/

class Solution:
    def maxDepth(self, root: 'Node') -> int:
        return self.height(root)
    
    def height(self,root):
        
        if root == None:
            return 0
        
        ans = 0
        #ans = 1
        
        for i in root.children:
            ans = max(ans,self.height(i))
            #ans = max(ans,1+self.height(i))
        
        #Using 1+ans here apart from including it in the above ans, because when recursively 
        #moving and it reaches last nodes for loop fails as it has no children.
        return 1+ans
        #return ans



#Traversals

Preorder(before) - node,letfchild,rightchild
PostOrder(after) - letfchild,rightchild,node
InOrder(inBetween) - letfchild,node,rightchild

#Preorder

Q: 144. Binary Tree Preorder Traversal

https://leetcode.com/problems/binary-tree-preorder-traversal/

#Recursive Method
class Solution:
    #TC - O(N)
    #SC - O(N)
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        l=[]
        self.preorder(root,l)
        return l
    
    def preorder(self,root,l):
        if root == None:
            return 
        
        l.append(root.val)
        self.preorder(root.left,l)
        self.preorder(root.right,l)
        
        return

#Iterative Method
class Solution:
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        #TC - O(N)
        #SC - O(H)
        answer = []
        
        if root == None:
            return answer
        
        stack = []
        
        #pushing the root on to the stack
        stack.append(root)
        
        #iterate until stack empty
        #Preorder stack order- node,right,left
        while (stack):
            #pop the last inserted element and push into the answer
            currentNode = stack.pop()
            answer.append(currentNode.val)
            
            if currentNode.right != None:
                stack.append(currentNode.right)
                
            if currentNode.left != None:
                stack.append(currentNode.left)
                
        return answer

Q: 589. N-ary Tree Preorder Traversal

https://leetcode.com/problems/n-ary-tree-preorder-traversal/

#Recursive

class Solution:
    #TC- O(N)
    #SC- O(N)
    def preorder(self, root: 'Node') -> List[int]:
        l = []
        self.preorder1(root,l)
        return l
    
    def preorder1(self,root,l):
        if root == None :
            return
        
        l.append(root.val)
        
        for i in root.children:
            self.preorder1(i,l)
        
        return

#Iterative
class Solution:
    #TC- O(N*N)
    #SC- O(h)
    def preorder(self, root: 'Node') -> List[int]:
        answer = []
        
        if root == None:
            return answer
        
        stack = []
        
        stack.append(root)
        
        #Root, right to left of childrens
        while (stack):
            currentNode = stack.pop()
            answer.append(currentNode.val)
            for i in range(len(currentNode.children)-1,-1,-1):
                stack.append(currentNode.children[i])
                
        return answer


#PostOrder

Q: 145. Binary Tree Postorder Traversal

https://leetcode.com/problems/binary-tree-postorder-traversal/

#Recursive

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        l = []
        self.postOrder(root,l)
        return l
    
    def postOrder(self,root,l):
        
        if root == None:
            return
        
        self.postOrder(root.left,l)
        self.postOrder(root.right,l)
        l.append(root.val)
        
        return

#Iterative

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        #Iterative
        #TC - O(N)
        #SC - O(H)
        answer = []
        
        if root == None:
            return answer
        
        stack = []
        
        stack.append(root)
        
        #stack - node,left,right
        while (stack):
            currentNode = stack.pop()
            answer.append(currentNode.val)
            
            if currentNode.left != None:
                stack.append(currentNode.left)
                
            if currentNode.right != None:
                stack.append(currentNode.right)
                
        return answer[::-1]

Q: 590. N-ary Tree Postorder Traversal

https://leetcode.com/problems/n-ary-tree-postorder-traversal/

#Recursive
class Solution:
    #TC- O(N)
    #SC- O(N)
    def preorder(self, root: 'Node') -> List[int]:
        l = []
        self.preorder1(root,l)
        return l
    
    def preorder1(self,root,l):
        if root == None :
            return
                
        for i in root.children:
            self.preorder1(i,l)
        l.append(root.val)
        return


#Iterative

class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        
        #iterative
        
        answer = []
        if root == None:
            return answer 
        stack = []
        
        stack.append(root)
        
        while(stack):
            currentNode = stack.pop()
            answer.append(currentNode.val)
            
            #left to right of childrens
            for i in range(0,len(currentNode.children)):
                stack.append(currentNode.children[i])
                
        return answer[::-1]
                

#InOrder

Q: 94. Binary Tree Inorder Traversal

https://leetcode.com/problems/binary-tree-inorder-traversal/

#Recursive

class Solution:
    #TC - O(N)
    #SC - O(N)
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        l=[]
        self.inOrder(root,l)
        return l
    
    def inOrder(self,root,l):
        
        if root == None:
            return
        
        self.inOrder(root.left,l)
        l.append(root.val)
        self.inOrder(root.right,l)
        
        return

#Iterative
class Solution:
    
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        
        #iterative
        #TC
        #SC
        
        answer = []
        
        if root == None:
            return answer
        
        stack = []
        currentNode = root
        while currentNode or stack:
            while currentNode:
                stack.append(currentNode)
                currentNode = currentNode.left
            
            node = stack.pop()
            answer.append(node.val)
            currentNode = node.right
                    
        return answer

Q: 617. Merge Two Binary Trees


https://leetcode.com/problems/merge-two-binary-trees/

class Solution:
    
    #TC - O(m+n)
    #SC - O(min(m,n))
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        return self.merge(root1,root2)
    
    def merge(self,root1,root2):
        
        #If both the roots are null we return none
        if root1 is None and root2 is None:
            return None
        
        #if oneside of the other is none and another tree has value, we return second trees value
        if root1 == None:
            return root2
        
        if root2 == None:
            return root1
        
        #when both the roots has value we create a newNode, and the consectively we assign left and right nodes by recursively calling the function
        newNode = TreeNode(root1.val+root2.val)
        newNode.left = self.merge(root1.left,root2.left)
        newNode.right = self.merge(root1.right,root2.right)
        
        return newNode

Q: 965. Univalued Binary Tree

https://leetcode.com/problems/univalued-binary-tree/

#a univalued binary tree is the tree in which all the nodes has same values

class Solution:
    #TC - O(N)
    #SC - O(1) recursive space - O(N)
    def isUnivalTree(self, root: Optional[TreeNode]) -> bool:
        #we take up the root value and pass it in every function
        return self.isUnivalued(root,root.val)
    
    def isUnivalued(self,root,val):
        
        #if there is not nodes left to iterrate we return true
        if root == None:
            return True
        
        #if the current root value is not equal to the val, then return false
        if root.val != val:
            return False
        
        return self.isUnivalued(root.left,val) and self.isUnivalued(root.right,val)

Q: 872. Leaf-Similar Trees

https://leetcode.com/problems/leaf-similar-trees/

#we intialize two empty list and pass the roots twice and compare two lists
class Solution:
    #TC - O(m+n)
    #SC - O(m+n)
    def leafSimilar(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> bool:
        x=[]
        y=[]
        self.similiarLeef(root1,x)
        self.similiarLeef(root2,y)
        return x == y
    
    def similiarLeef(self,root,l):
        if root == None:
            return

        #get value of last node and push the element to list.       
        if root.left == None and root.right == None:
            l.append(root.val)
            return

        #iterate to the left of tree
        self.similiarLeef(root.left,l)
        #iterate to the right of tree
        self.similiarLeef(root.right,l)


Q: 129. Sum Root to Leaf Numbers

https://leetcode.com/problems/sum-root-to-leaf-numbers/


class Solution:
    #TC - O(n)
    #SC- O(n)
    def sumNumbers(self, root: Optional[TreeNode]) -> int:
        #passing the pattern string which has root val 
        return self.sumNum(root,str(root.val))
    
    def sumNum(self,root,s):
        
        
        if root.left == None and root.right == None:
            return int(s)
        
        a=0
        b=0
        if root.left != None:
            a=int(self.sumNum(root.left,s+str(root.left.val)))
        if root.right != None:
            b=int(self.sumNum(root.right,s+str(root.right.val)))
        return a+b




Q: 257. Binary Tree Paths

https://leetcode.com/problems/binary-tree-paths/

class Solution:
    def binaryTreePaths(self, root: Optional[TreeNode]) -> List[str]:
        #TC - O(n)
        #SC - O(x)- answer array + O(h) -recursive stack
        l=[]
        self.binaryPaths(root,str(root.val),l)
        return l
    
    def binaryPaths(self,root,s,a):
        #if leaf node is reached push them to the list
        if root.left == None and root.right == None:
            a.append(s)
            return
        
        
        if root.left != None:
            self.binaryPaths(root.left,s+"->"+str(root.left.val),a)
        if root.right != None:
            self.binaryPaths(root.right,s+"->"+str(root.right.val),a)
        return


Q: 404. Sum of Left Leaves

https://leetcode.com/problems/sum-of-left-leaves/

class Solution:
    def sumOfLeftLeaves(self, root: Optional[TreeNode]) -> int:
        #TC - O(n)
        #SC - O(1) + O(n)->stack
        return self.sumOfLeftLeaf(root,False)
            
    def sumOfLeftLeaf(self,root,isLeftSide):
        
        if root == None:
            return 0
        
        if root.left == None and root.right == None:
            return root.val if isLeftSide else 0
            
        leftAns = self.sumOfLeftLeaf(root.left,True)
        rightAns = self.sumOfLeftLeaf(root.right,False)
        
        return leftAns+rightAns

Q: 112. Path Sum

#Sum of all nodes from root to leaf across the path is equal to targetSum

https://leetcode.com/problems/path-sum/

class Solution:
    def hasPathSum(self, root: Optional[TreeNode], targetSum: int) -> bool:
        #TC - O(n)
        #SC - O(1)+O(h)-recursive stack
        return self.pathSum(root,0,targetSum)
    
    def pathSum(self,root,s,ts):
        
        if root == None:
            return False
        
        if root.left == None and root.right == None:
            if s+root.val == ts:
                return True
            else:
                return False
        
        a = self.pathSum(root.left,s+root.val,ts)
        b = self.pathSum(root.right,s+root.val,ts)
        
        return a or b


Q: 993. Cousins in Binary Tree

#give two nodes, same level different parents

https://leetcode.com/problems/cousins-in-binary-tree/

class Solution:
    def isCousins(self, root: Optional[TreeNode], x: int, y: int) -> bool:
        #TC - O(N)
        #SC - O(1) + O(N)- Recursive Stack
        parents = [None]*2
        levels = [None]*2
        
        self.cousins(root,x,y,1,0,parents,levels)
        return parents[0] != parents[1] and levels[0] == levels[1]
    
    def cousins(self,root,x,y,level,prev,parents,levels):
        
        if root == None:
            return
        
        if root.val == x or root.val == y:
            parents.append(prev)
            levels.append(level)
                
        self.cousins(root.left,x,y,level+1,root.val,parents,levels)

        self.cousins(root.right,x,y,level+1,root.val,parents,levels)
        
        return

Q: 100. Same Tree

https://leetcode.com/problems/same-tree/

The strategy is to compare the current p and q, and then compare p's left node with q's left node, then p's right node with q's right node. If at any point they are not equal return False (# [3]). The terminating conditions for the recursion are:
 1. if both trees have reached the end (# [1]), and 2. one tree reaches the end, but the other doesn't (# [2]).

class Solution:
    #TC&SC - O(min(m,n))
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        if p == None and q == None:
            return True
        
        if p == None or q == None or p.val != q.val:
            return False
         
        return self.isSameTree(p.left,q.left) and self.isSameTree(p.right,q.right)

Q: 226. Invert Binary Tree

https://leetcode.com/problems/invert-binary-tree/

#Find its mirrior image

class Solution:
    def invertTree(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        #TC - O(N)
        #SC - O(N)+O(h)
        return self.invert(root)
    
    def invert(self,root):
        
        if root == None:
            return
        
        a = self.invert(root.left)
        b = self.invert(root.right)
        
        root.right = a
        root.left = b
        
        return root


Q: 101. Symmetric Tree

#return tree if left subtree and righ subtree are equal or false
https://leetcode.com/problems/symmetric-tree/

class Solution:
    def isSymmetric(self, root: Optional[TreeNode]) -> bool:
        #TC - O(N)
        #SC - O(1) + O(h)- recursive stack
        return self.isTrue(root.left,root.right)
    
    def isTrue(self,p,q):
        if p == None and q == None:
            return True
        
        if p == None or q == None or p.val != q.val:
            return False
        
        #if p.val == q.val:
            #return True
        
        
        return self.isTrue(p.left,q.right) and self.isTrue(q.left,p.right)

Q: Siblings in a binary tree gfg

def CheckIfNodesAreSiblings(root, data_one,
								data_two):
	
	if (root == None):
		return False

	# Compare the two given nodes with
	# the childrens of current node
	if root.left!= None and root.right!= None:
	    
	    if root.left.data == data_one and root.right.data == data_two:
	        return True
	    
	    if root.left.data == data_two and root.right.data == data_one:
	        return True
	
	a = CheckIfNodesAreSiblings(root.left,data_one,data_two)
	b = CheckIfNodesAreSiblings(root.right,data_one,data_two)
	
	return a or b

Q: Print all nodes that don't have a sibling - gfg

https://practice.geeksforgeeks.org/problems/print-all-nodes-that-dont-have-sibling/1/#

def noSibling(root):
    # code here
    l=[]
    noSib(root,l)
    return sorted(l) if l else [-1]
    

def noSib(root,l):
    
    
    if root.left == None and root.right == None:
        return 
    
    if root.left != None and root.right == None:
        l.append(root.left.data)
    if root.right != None and root.left == None:
        l.append(root.right.data)
        
    if root.left!= None:
        noSib(root.left,l)
    if root.right!=None:
        noSib(root.right,l)


Q: 199. Binary Tree Right Side View

https://leetcode.com/problems/binary-tree-right-side-view/

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        #TC - O(N)
        #SC - O(N)+O(N)+O(H)
        maxLevel = [0]
        l=[]
        
        self.rightSide(root,maxLevel,l,1)
        
        return l
    
    def rightSide(self,root,maxLevel,l,level):
        
        if root == None:
            return 
        
        #This is used to kept track of levels
        if maxLevel[0]<level:
            maxLevel[0] = level
            l.append(root.val)
            
        
        self.rightSide(root.right,maxLevel,l,level+1)
        self.rightSide(root.left,maxLevel,l,level+1)
        
        return


#DFS Method

class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        #TC - O(N)
        #SC - O(N)+O(H)- recursive stack
        l=[]
        
        self.rightSide(root,l,0)
        
        return l
    
    def rightSide(self,root,l,level):
        
        if root == None:
            return 
        
        #checking whether the current level is equal to the len
        if len(l)==level:
            l.append(root.val)
            
        
        self.rightSide(root.right,l,level+1)
        self.rightSide(root.left,l,level+1)
        
        return


#Left side view the only thing which changes is root.left and root.right next



Q: Top View of Binary Tree - gfg

https://practice.geeksforgeeks.org/problems/top-view-of-binary-tree/1/#

https://www.tutorialcup.com/interview/tree/top-view-of-binary-tree.htm

class Solution:
    
    #Function to return a list of nodes visible from the top view 
    #from left to right in Binary Tree.
    def topView(self,root):
        
        # code here
        
        d = {}
        val = [100000001,-1000000001]
        
        self.TopView(root,d,0,val,0)
        
        #print(d)
        ans = []
        for i in range(val[0],val[1]+1):
            ans.append(d[i][0])
        return ans
        
        
    def TopView(self,root,memo,hd,val,level):
        
        if root == None:
            return
        
        #if it has no entry in HashMap, will put or else if it has been pushed at higher level and if we found 
        # the distance again at lower level we will push that element
        if hd not in memo or level < memo[hd][1]:
            val[0] = min(val[0],hd)
            val[1] = max(val[1],hd)
            memo[hd] = (root.data,level)
            
        self.TopView(root.left,memo,hd-1,val,level+1)
        self.TopView(root.right,memo,hd+1,val,level+1)
        
        return


Q: Bottom view of Binary Tree - gfg

https://practice.geeksforgeeks.org/problems/bottom-view-of-binary-tree/1

#The difference between the topView and button view is ,we take all the nodes below, and only the if condition changes.

class Solution:
    def bottomView(self, root):

        #TC - O(n)
        #SC - O(n)
        # code here
        
        d = {}
        ans = []
        val = [1000001,-100001]
        self.BottomView(root,d,val,0,0)
        
        #print(val)
        for i in range(val[0],val[1]+1):
            ans.append(d[i][0])
         
        return ans   
    
    def BottomView(self, root, d, val, level, hd):
        
        if root == None:
            return
        
        # if hd not in memo or the level found is greater than or equal to the one in memo
        if hd not in d or level >= d[hd][1]:
            val[0] = min(val[0],hd)
            val[1] = max(val[1],hd)
            d[hd] = (root.data,level)
            
            
        self.BottomView(root.left,d,val,level+1,hd-1)
        self.BottomView(root.right,d,val,level+1,hd+1)
        
        
        return
            
Q: 863. All Nodes Distance K in Binary Tree

https://leetcode.com/problems/all-nodes-distance-k-in-binary-tree/



class Solution:
    def distanceK(self, root: TreeNode, target: TreeNode, k: int) -> List[int]:
        
        #TC - O(n) + O(n)
        #SC - O(n) + O(n) + O(k)

        #this get parents for all nodes, so it is useful to traverse upwards
        parents = self.getParents(root,None,{})
        return self.iterateTree(target,parents,k,[],{})
    
    def iterateTree(self,target,parents,k,l,visited):
        
        #if the node has been visitied and root becomes none
        if target == None or target.val in visited:
            return
        
        #if the distance is 0 then add the list
        if k == 0:
            l.append(target.val)
        
        #marking the nodes which has been visited
        visited[target.val] = 1
        
        #iterate over left,right and parents and decrease k by 1
        self.iterateTree(target.left,parents,k-1,l,visited)
        self.iterateTree(target.right,parents,k-1,l,visited)
        self.iterateTree(parents[target.val],parents,k-1,l,visited)
            
        return l
    
    def getParents(self, root, prev, memo):
        
        if root == None:
            return
        
        #store the parent node link
        memo[root.val] = prev
        
        self.getParents(root.left,root,memo)
        self.getParents(root.right,root,memo)
        
        return memo



Level order Traversal(BFS)

Level order traverses by levels, first level0 and then level and level2 and so on........

# we use queue for implementing for BFS

Q: Level order traversal 

https://practice.geeksforgeeks.org/problems/level-order-traversal/1/

from collections import deque

class Solution:
    #Function to return the level order traversal of a tree.
    def levelOrder(self,root ):
        # Code here
        q = deque()
        l = []
        
        q.append(root)
        while(q):
            x=q.popleft()
            l.append(x.data)
            
            if x.left != None:
                q.append(x.left)
            if x.right != None:
                q.append(x.right)
            
        return l


Q: 102. Binary Tree Level Order Traversal

https://leetcode.com/problems/binary-tree-level-order-traversal/


from collections import deque
class Solution:
    def levelOrder(self, root: Optional[TreeNode]) -> List[List[int]]:
        l = []
        d = deque()
        
        if root == None:
            return []
        
        d.append(root)
        
        while(d):
            # find the size of queue, because size represents number of nodes
            # at any level
            
            currentSize = len(d)
            a = []
            while currentSize:
                x = d.popleft()
                a.append(x.val)
                
                if x.left != None:
                    d.append(x.left)
                if x.right != None:
                    d.append(x.right)
                currentSize -=1   
            l.append(a)
            
        return l

Q: 429. N-ary Tree Level Order Traversal

https://leetcode.com/problems/n-ary-tree-level-order-traversal/

from collections import deque
class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        q = deque()
        l = []
        
        
        if root == None:
            return []
        q.append(root)
        
        while(q):
            currentSize = len(q)
            
            a = []
            while currentSize:
                x = q.popleft()
                a.append(x.val)
            
                for i in x.children:
                    q.append(i)
                    
                currentSize -= 1
            
            l.append(a)
                
        return l

Q: 107. Binary Tree Level Order Traversal II

https://leetcode.com/problems/binary-tree-level-order-traversal-ii/

class Solution:
    def levelOrderBottom(self, root: Optional[TreeNode]) -> List[List[int]]:
        
        l = []
        d = deque()
        
        if root == None:
            return []
        
        d.append(root)
        
        while(d):
            # find the size of queue, because size represents number of nodes
            # at any level
            
            currentSize = len(d)
            a = []
            while currentSize:
                x = d.popleft()
                a.append(x.val)
                
                if x.left != None:
                    d.append(x.left)
                if x.right != None:
                    d.append(x.right)
                currentSize -=1   
            l.append(a)
            
        return l[::-1]


Q: 104. Maximum Depth of Binary Tree

https://leetcode.com/problems/maximum-depth-of-binary-tree/

from collections import deque
class Solution:
    #BFS
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        q = deque()
        
        q.append(root)
        
        if root == None:
            return 0
        
        height = 0
        
        while(q):
            size = len(q)
            
            while size:
                x = q.popleft()
                
                if x.left != None:
                    q.append(x.left)
                    
                if x.right != None:
                    q.append(x.right)
                
                size -= 1
            height += 1
        
        return height


Q: 965. Univalued Binary Tree

https://leetcode.com/problems/univalued-binary-tree/


class Solution:
    #TC - O(N)
    #SC - O(1)
    def isUnivalTree(self, root: Optional[TreeNode]) -> bool:
        #BFS
        q = deque()
        
        q.append(root)
        
        if root == None:
            return 0
        
        y = root.val
        
        while(q):
            x = q.popleft()
            
            if x.val != y:
                return False
            if x.left != None:
                q.append(x.left)
                    
            if x.right != None:
                q.append(x.right)
                
            
        
        return True


Q: 637. Average of Levels in Binary Tree

https://leetcode.com/problems/average-of-levels-in-binary-tree/


class Solution:
    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:
        l = []
        d = deque()
        
        if root == None:
            return []
        
        d.append(root)
        
        while(d):
            # find the size of queue, because size represents number of nodes
            # at any level
            
            currentSize = len(d)
            count = currentSize
            s = 0
            while currentSize:
                x = d.popleft()
                
                s += x.val
                if x.left != None:
                    d.append(x.left)
                if x.right != None:
                    d.append(x.right)
                currentSize -=1   
            l.append(s/count)
            
            
        return l


Q: 100. Same Tree(DFS)

https://leetcode.com/problems/same-tree/


from collections import deque
class Solution:
    def isSameTree(self, p: Optional[TreeNode], q: Optional[TreeNode]) -> bool:
        queue = deque()
        
        #adding as pairs in queue
        queue.append((p,q))
    
        while queue:
            #dequeuing pairs
            curNode1, curNode2 = queue.popleft()

            #if both are none
            if curNode1 == None and curNode2 == None:
                continue
            
            if curNode1 == None or curNode2 == None or curNode1.val != curNode2.val:
                return False
            
            
            if curNode1.left != None or curNode2.left != None:
                queue.append((curNode1.left, curNode2.left))
            if curNode1.right != None or curNode2.right != None:
                queue.append((curNode1.right, curNode2.right))
    
        return True
            

