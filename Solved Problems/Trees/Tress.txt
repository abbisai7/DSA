https://www.geeksforgeeks.org/binary-tree-set-1-introduction/

Q: 104. Maximum Depth of Binary Tree

https://leetcode.com/problems/maximum-depth-of-binary-tree/

#    node
#    /\
#  1+LC 1+RC

class Solution:
    #TC - O(n)
    #SC - O(1) or O(height of tree)
    def maxDepth(self, root: Optional[TreeNode]) -> int:
        return self.height(root)
    
    def height(self,root):
        
        if root == None:
            return 0
        
        leftAns = 1 + self.height(root.left)
        rightAns = 1 + self.height(root.right)
        
        return max(leftAns,rightAns)


Q: 559. Maximum Depth of N-ary Tree

https://leetcode.com/problems/maximum-depth-of-n-ary-tree/

class Solution:
    def maxDepth(self, root: 'Node') -> int:
        return self.height(root)
    
    def height(self,root):
        
        if root == None:
            return 0
        
        ans = 0
        
        for i in root.children:
            ans = max(ans,self.height(i))
        
        return 1+ans



#Traversals

Preorder(before) - node,letfchild,rightchild
PostOrder(after) - letfchild,rightchild,node
InOrder(inBetween) - letfchild,node,rightchild

#Preorder

Q: 144. Binary Tree Preorder Traversal

https://leetcode.com/problems/binary-tree-preorder-traversal/

class Solution:
    #TC - O(N)
    #SC - O(N)
    def preorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        l=[]
        self.preorder(root,l)
        return l
    
    def preorder(self,root,l):
        if root == None:
            return 
        
        l.append(root.val)
        self.preorder(root.left,l)
        self.preorder(root.right,l)
        
        return


Q: 589. N-ary Tree Preorder Traversal

https://leetcode.com/problems/n-ary-tree-preorder-traversal/

class Solution:
    #TC- O(N)
    #SC- O(N)
    def preorder(self, root: 'Node') -> List[int]:
        l = []
        self.preorder1(root,l)
        return l
    
    def preorder1(self,root,l):
        if root == None :
            return
        
        l.append(root.val)
        
        for i in root.children:
            self.preorder1(i,l)
        
        return


#PostOrder

Q: 145. Binary Tree Postorder Traversal

https://leetcode.com/problems/binary-tree-postorder-traversal/

class Solution:
    def postorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        l = []
        self.postOrder(root,l)
        return l
    
    def postOrder(self,root,l):
        
        if root == None:
            return
        
        self.postOrder(root.left,l)
        self.postOrder(root.right,l)
        l.append(root.val)
        
        return


Q: 590. N-ary Tree Postorder Traversal

class Solution:
    #TC- O(N)
    #SC- O(N)
    def preorder(self, root: 'Node') -> List[int]:
        l = []
        self.preorder1(root,l)
        return l
    
    def preorder1(self,root,l):
        if root == None :
            return
                
        for i in root.children:
            self.preorder1(i,l)
        l.append(root.val)
        return

#InOrder

Q: 94. Binary Tree Inorder Traversal

https://leetcode.com/problems/binary-tree-inorder-traversal/

class Solution:
    #TC - O(N)
    #SC - O(N)
    def inorderTraversal(self, root: Optional[TreeNode]) -> List[int]:
        l=[]
        self.inOrder(root,l)
        return l
    
    def inOrder(self,root,l):
        
        if root == None:
            return
        
        self.inOrder(root.left,l)
        l.append(root.val)
        self.inOrder(root.right,l)
        
        return

Q: 617. Merge Two Binary Trees


https://leetcode.com/problems/merge-two-binary-trees/

class Solution:
    
    #TC - O(m+n)
    #SC - O(min(m,n))
    def mergeTrees(self, root1: Optional[TreeNode], root2: Optional[TreeNode]) -> Optional[TreeNode]:
        return self.merge(root1,root2)
    
    def merge(self,root1,root2):
        
        #If both the roots are null we return none
        if root1 is None and root2 is None:
            return None
        
        #if oneside of the other is none and another tree has value, we return second trees value
        if root1 == None:
            return root2
        
        if root2 == None:
            return root1
        
        #when both the roots has value we create a newNode, and the consectively we assign left and right nodes by recursively calling the function
        newNode = TreeNode(root1.val+root2.val)
        newNode.left = self.merge(root1.left,root2.left)
        newNode.right = self.merge(root1.right,root2.right)
        
        return newNode

Q: 965. Univalued Binary Tree

https://leetcode.com/problems/univalued-binary-tree/

#a univalued binary tree is the tree in which all the nodes has same values

class Solution:
    #TC - O(N)
    #SC - O(1) recursive space - O(N)
    def isUnivalTree(self, root: Optional[TreeNode]) -> bool:
        #we take up the root value and pass it in every function
        return self.isUnivalued(root,root.val)
    
    def isUnivalued(self,root,val):
        
        #if there is not nodes left to iterrate we return true
        if root == None:
            return True
        
        #if the current root value is not equal to the val, then return false
        if root.val != val:
            return False
        
        return self.isUnivalued(root.left,val) and self.isUnivalued(root.right,val)


