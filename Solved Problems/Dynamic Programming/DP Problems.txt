#Dp Problems Solved


->DP Numbers of ways - oneStep+twoStep


Q: Climbing Stairs - LC 70

https://leetcode.com/problems/climbing-stairs/

# Here we can either climb one step or two step, which implies index can be moved 1 or 2

#currIdx-> currIdx+1 and currIdx+2

Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

class Solution:
    #TC - O(n)
    #SC - O(n)
    def climbStairs(self, n: int) -> int:
        return self.totalWays(0,n,{})
    
    def totalWays(self,currIdx,target,memo):
        
        if currIdx == target:
            return 1
        
        if currIdx > target:
            return 0
        
        if currIdx in memo:
            return memo[currIdx]
        
        oneStep = self.totalWays(currIdx+1,target,memo)
        twoStep = self.totalWays(currIdx+2,target,memo)
        
        memo[currIdx] = oneStep + twoStep
        
        return memo[currIdx]      
        
Q: Fibonacci Number LC- 509

https://leetcode.com/problems/fibonacci-number/

#F(0) = 0, F(1) = 1
#F(n) = F(n - 1) + F(n - 2), for n > 1.
Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.

class Solution:
    #TC - O(n)
    #SC - O(n)- Length of stack which goes till n
    def fib(self, n: int) -> int:
        return self.nthFib(n,{})
    
    def nthFib(self, n, d):
        if n == 0:
            return 0
        if n == 1:
            return 1
        cs = n
        if cs in d:
            return d[cs]
        
        a = self.nthFib(n-1,d)
        b = self.nthFib(n-2,d)
        
        d[cs] = a+b
        
        return  a+b 


#Coin Change Varities

Q: Coin Change 2 LC 518

https://leetcode.com/problems/coin-change-2/

This is an unbounded knapsack type problem, where an elements can be considered any number of types.Here we find the number of ways in which the coins can be used to form the amount, the recursion logic is almost same of climbing stairs


class Solution:
    #TC - O(n*amount)
    #SC - O(n)
    def change(self, amount: int, coins: List[int]) -> int:
        return self.noOfWays(amount,coins,0,{})
    
    def noOfWays(self,amount,coins,curIdx,memo):

        #if amount is zero at any point, return 1
        if amount == 0:
            return 1
        
        #base condition when array bounds out of length
        if curIdx >= len(coins):
            return 0
        
        #declare the key for Dynamic Programming
        curKey = str(curIdx) + "-" + str(amount)
        
        #check if the memo already contains key
        if curKey in memo:
            return memo[curKey]
        
        curAmount = coins[curIdx]
        consider = 0
        
        #check if coins of current index is less than or equal to amount only then check for pickItem
        if curAmount <= amount:
            #pickItem = profit + function call of the same current Index - unbounded Knapsack(includes duplicates)
            consider = self.noOfWays(amount-curAmount,coins,curIdx,memo)#if the coin is considerd reduce the amount by the value of that coin
        
        #dont pick, move to next index
        notConsider = self.noOfWays(amount,coins,curIdx+1,memo)
        
        memo[curKey] = consider + notConsider #summing the ways
        
        return memo[curKey]

Q: Coin Change LC 322

#Here we need to find min the number of coins required to sum up the amount. 
#Whenever we need to find min we set the consider elements to infinity so minimum elements amoung consider and notConsider is returned.
https://leetcode.com/problems/coin-change/

class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        #if amount%coins[0] !=0 and len(coins) == 1:
            #return -1
        
        x = self.maxProfit(amount,coins,0,{})
        return x if x != inf else -1
    
    def maxProfit(self,amount,coins,curIdx,memo):  
        if amount == 0:
            return 0
        
        if curIdx >= len(coins):
            return float("inf")
        
        curKey = str(curIdx) + "-" + str(amount)
        
        if curKey in memo:
            return memo[curKey]
        
        curAmount = coins[curIdx]
        consider = math.inf
        
        if curAmount <= amount:
            consider = 1 + self.maxProfit(amount-curAmount,coins,curIdx,memo)
            
        notConsider = self.maxProfit(amount,coins,curIdx+1,memo)
        
        memo[curKey] = min(consider,notConsider)

        return  memo[curKey] 